# -*- coding:utf-8 -*-

import tensorflow as tf
from tensorflow.python.ops import tensor_array_ops, control_flow_ops
import numpy as np


class Generator(object):
    def __init__(self, num_vocabulary, batch_size, emb_dim, hidden_dim,
                 sequence_length, start_token,
                 learning_rate=0.01, reward_gamma=0.95):
        self.num_vocabulary = num_vocabulary
        self.batch_size = batch_size
        self.emb_dim = emb_dim
        self.hidden_dim = hidden_dim
        self.sequence_length = sequence_length
        # 创建一个开始的序列张量，batch大小
        self.start_token = tf.constant([start_token] * self.batch_size, dtype=tf.int32)
        self.learning_rate = tf.Variable(float(learning_rate), trainable=False)
        self.reward_gamma = reward_gamma
        self.g_params = []
        self.d_params = []
        self.temperature = 1.0
        self.grad_clip = 5.0

        self.expected_reward = tf.Variable(tf.zeros([self.sequence_length]))

        # 生成器待更新的的参数变量
        with tf.variable_scope('generator'):
            # 按照正太分布随机初始化embeddings信息shape为：词库大小×维度
            self.g_embeddings = tf.Variable(self.init_matrix([self.num_vocabulary, self.emb_dim]))
            self.g_params.append(self.g_embeddings)
            self.g_recurrent_unit = self.create_recurrent_unit(self.g_params)  # maps h_tm1 to h_t for generator
            self.g_output_unit = self.create_output_unit(self.g_params)  # maps h_t to o_t (output token logits)

        # placeholder definition
        self.x = tf.placeholder(tf.int32, shape=[self.batch_size,
                                                 self.sequence_length])  # sequence of tokens generated by generator
        self.rewards = tf.placeholder(tf.float32, shape=[self.batch_size,
                                                         self.sequence_length])  # get from rollout policy and discriminator

        # processed for batch
        with tf.device("/cpu:0"):  # embedding_lookup 选取张量里对应的索引，self.g_embeddings张量, self.x张量对应的索引
            self.processed_x = tf.transpose(tf.nn.embedding_lookup(self.g_embeddings, self.x),
                                            perm=[1, 0, 2])  # seq_length x batch_size x emb_dim

        # Initial states
        self.h0 = tf.zeros([self.batch_size, self.hidden_dim])  # batch_size 64  hidden_dim 32
        self.h0 = tf.stack([self.h0, self.h0])  # 张量拼接 一批64 共生成128

        # 一种动态迭代的原语，支持梯度反向传播，
        # This class is meant to be used with dynamic iteration primitives such as `while_loop` and `map_fn`.
        # It supports gradient back-propagation via special  "flow" control flow dependencies.
        gen_o = tensor_array_ops.TensorArray(dtype=tf.float32, size=self.sequence_length)
        gen_x = tensor_array_ops.TensorArray(dtype=tf.int32, size=self.sequence_length)

        # 生成递归网络
        def _g_recurrence(i, x_t, h_tm1, gen_o, gen_x):
            h_t = self.g_recurrent_unit(x_t, h_tm1)  # hidden_memory_tuple
            o_t = self.g_output_unit(h_t)  # batch x vocab , logits not prob
            log_prob = tf.log(tf.nn.softmax(o_t))
            # cast对输入tensor进行数据类型转换
            next_token = tf.cast(   # multinomial对求完log的样例sampling，每个值是0或1
                tf.reshape(tensor=tf.multinomial(logits=log_prob, num_samples=1), shape=[self.batch_size]), tf.int32)
            x_tp1 = tf.nn.embedding_lookup(self.g_embeddings, next_token)  # batch x emb_dim  获取token的词嵌入

            # 不太明白这个gen_o是用来干什么的，好像压根也没有用到，好像
            gen_o = gen_o.write(i, tf.reduce_sum(  # reduce_sum 在某一维度上（axis=1，按行）求和； multiply对应位置元素相乘
                tf.multiply(tf.one_hot(next_token, self.num_vocabulary, on_value=1.0, off_value=0.0),
                            tf.nn.softmax(o_t)), axis=1))  # [batch_size] , prob
            # 承接上面next_token部分
            gen_x = gen_x.write(i, next_token)  # indices, batch_size
            return i + 1, x_tp1, h_t, gen_o, gen_x

        # 得到的是上面函数返回的5个值
        _, _, _, self.gen_o, self.gen_x = control_flow_ops.while_loop(
            cond=lambda i, _1, _2, _3, _4: i < self.sequence_length,
            body=_g_recurrence,
            loop_vars=(tf.constant(0, dtype=tf.int32),  # 创建一个常数张量
                       tf.nn.embedding_lookup(params=self.g_embeddings, ids=self.start_token), self.h0, gen_o, gen_x))

        self.gen_x = self.gen_x.stack()  # seq_length x batch_size      矩阵拼接
        self.gen_x = tf.transpose(self.gen_x, perm=[1, 0])  # batch_size x seq_length

        # -----------------------------------------------------------------------------------------------------
        # supervised pretraining for generator  监督预训练
        g_predictions = tensor_array_ops.TensorArray(dtype=tf.float32, size=self.sequence_length)

        ta_emb_x = tensor_array_ops.TensorArray(dtype=tf.float32, size=self.sequence_length)
        ta_emb_x = ta_emb_x.unstack(self.processed_x)  # unstack矩阵分解

        # 预训练递归网络
        def _pretrain_recurrence(i, x_t, h_tm1, g_predictions):
            h_t = self.g_recurrent_unit(x_t, h_tm1)
            o_t = self.g_output_unit(h_t)
            g_predictions = g_predictions.write(i, tf.nn.softmax(o_t))  # batch x vocab_size
            x_tp1 = ta_emb_x.read(i)
            return i + 1, x_tp1, h_t, g_predictions

        _, _, _, self.g_predictions = control_flow_ops.while_loop(
            cond=lambda i, _1, _2, _3: i < self.sequence_length,
            body=_pretrain_recurrence,
            loop_vars=(tf.constant(0, dtype=tf.int32),
                       tf.nn.embedding_lookup(self.g_embeddings, self.start_token), self.h0, g_predictions))

        self.g_predictions = tf.transpose(self.g_predictions.stack(),
                                          perm=[1, 0, 2])  # batch_size x seq_length x vocab_size
        print('g_predictions:',type(g_predictions),g_predictions)
        # 根据WGAN的结果进行模型改进去掉损失中的log@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        # pretraining loss
        self.pretrain_loss = -tf.reduce_sum(  # reduce_sum计算一个张量在各个维度上元素的总和，最后/（长度*batch_size）求均值
            tf.one_hot(indices=tf.to_int32(tf.reshape(self.x, [-1])),  # tf.reshape(x,[-1])转变成列表，-1表示自动计算维度
                       depth=self.num_vocabulary, on_value=1.0, off_value=0.0) * tf.log(
                tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]),  # 自动计算行数，列数词库大小
                                 clip_value_min=1e-20, clip_value_max=1.0))) / (self.sequence_length * self.batch_size)
        # self.pretrain_loss = -tf.reduce_sum(  # reduce_sum计算一个张量在各个维度上元素的总和，最后/（长度*batch_size）求均值
        #     tf.one_hot(indices=tf.to_int32(tf.reshape(self.x, [-1])),  # tf.reshape(x,[-1])转变成列表，-1表示自动计算维度
        #                depth=self.num_vocabulary, on_value=1.0, off_value=0.0) *
        #         tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]),  # 自动计算行数，列数词库大小
        #                          clip_value_min=1e-20, clip_value_max=1.0)) / (self.sequence_length * self.batch_size)

        # self.pretrain_updates = tf.train.AdamOptimizer(self.learning_rate).minimize(self.pretrain_loss, self.g_params)
        # training updates    以下三行等同与上面一句
        pretrain_opt = self.g_optimizer(self.learning_rate)
        # 下面minimize操作  clip_by_global_norm通过权重梯度的总和的比率来截取多个张量的值
        self.pretrain_grad, _ = tf.clip_by_global_norm(tf.gradients(self.pretrain_loss, self.g_params), self.grad_clip)
        self.pretrain_updates = pretrain_opt.apply_gradients(zip(self.pretrain_grad, self.g_params))

        #######################################################################################################
        #  Unsupervised Training
        #######################################################################################################
        # 根据WGAN的结果进行模型改进去掉损失中的log@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        self.g_loss = -tf.reduce_sum(
            tf.reduce_sum(
                tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) * tf.log(
                    tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)
                ), 1) * tf.reshape(self.rewards, [-1])
        )
        # self.g_loss = -tf.reduce_sum(
        #     tf.reduce_sum(
        #         tf.one_hot(tf.to_int32(tf.reshape(self.x, [-1])), self.num_vocabulary, 1.0, 0.0) *
        #             tf.clip_by_value(tf.reshape(self.g_predictions, [-1, self.num_vocabulary]), 1e-20, 1.0)
        #         , 1) * tf.reshape(self.rewards, [-1])
        # )

        # self.g_updates = tf.train.AdamOptimizer(self.learning_rate).minimize(self.g_loss,var_list=self.g_params)
        # 下面这三行+g_optimizer()函数，等同于上面一行
        g_opt = self.g_optimizer(self.learning_rate)
        # 下面minimize操作
        self.g_grad, _ = tf.clip_by_global_norm(tf.gradients(self.g_loss, self.g_params), self.grad_clip)
        self.g_updates = g_opt.apply_gradients(zip(self.g_grad, self.g_params))

    # 生成器
    def generate(self, sess):
        outputs = sess.run(self.gen_x)
        return outputs

    # 预训练
    def pretrain_step(self, sess, x):
        outputs = sess.run([self.pretrain_updates, self.pretrain_loss], feed_dict={self.x: x})
        return outputs

    # 随机初始化矩阵
    def init_matrix(self, shape):
        return tf.random_normal(shape, stddev=0.1)  # 服从正太分布的；stddev标准差

    # 全零的向量
    def init_vector(self, shape):
        return tf.zeros(shape)

    # 创建循环神经网络LSTM，返回神经元节点
    def create_recurrent_unit(self, params):
        # Weights and Bias for input and hidden tensor
        self.Wi = tf.Variable(self.init_matrix([self.emb_dim, self.hidden_dim]))
        self.Ui = tf.Variable(self.init_matrix([self.hidden_dim, self.hidden_dim]))
        self.bi = tf.Variable(self.init_matrix([self.hidden_dim]))

        self.Wf = tf.Variable(self.init_matrix([self.emb_dim, self.hidden_dim]))
        self.Uf = tf.Variable(self.init_matrix([self.hidden_dim, self.hidden_dim]))
        self.bf = tf.Variable(self.init_matrix([self.hidden_dim]))

        self.Wog = tf.Variable(self.init_matrix([self.emb_dim, self.hidden_dim]))
        self.Uog = tf.Variable(self.init_matrix([self.hidden_dim, self.hidden_dim]))
        self.bog = tf.Variable(self.init_matrix([self.hidden_dim]))

        self.Wc = tf.Variable(self.init_matrix([self.emb_dim, self.hidden_dim]))
        self.Uc = tf.Variable(self.init_matrix([self.hidden_dim, self.hidden_dim]))
        self.bc = tf.Variable(self.init_matrix([self.hidden_dim]))
        params.extend([
            self.Wi, self.Ui, self.bi,
            self.Wf, self.Uf, self.bf,
            self.Wog, self.Uog, self.bog,
            self.Wc, self.Uc, self.bc])

        def unit(x, hidden_memory_tm1):
            # LSTM
            previous_hidden_state, c_prev = tf.unstack(hidden_memory_tm1)

            # Input Gate
            i = tf.sigmoid(
                tf.matmul(x, self.Wi) +
                tf.matmul(previous_hidden_state, self.Ui) + self.bi
            )

            # Forget Gate
            f = tf.sigmoid(
                tf.matmul(x, self.Wf) +
                tf.matmul(previous_hidden_state, self.Uf) + self.bf
            )

            # Output Gate
            o = tf.sigmoid(
                tf.matmul(x, self.Wog) +
                tf.matmul(previous_hidden_state, self.Uog) + self.bog
            )

            # New Memory Cell
            c_ = tf.nn.tanh(
                tf.matmul(x, self.Wc) +
                tf.matmul(previous_hidden_state, self.Uc) + self.bc
            )

            # Final Memory cell
            c = f * c_prev + i * c_

            # Current Hidden state
            current_hidden_state = o * tf.nn.tanh(c)

            return tf.stack([current_hidden_state, c])

        return unit

    # 创建输出层，返回神经元
    def create_output_unit(self, params):
        self.Wo = tf.Variable(self.init_matrix([self.hidden_dim, self.num_vocabulary]))
        self.bo = tf.Variable(self.init_matrix([self.num_vocabulary]))
        params.extend([self.Wo, self.bo])

        def unit(hidden_memory_tuple):
            hidden_state, c_prev = tf.unstack(hidden_memory_tuple)
            logits = tf.matmul(hidden_state, self.Wo) + self.bo
            return logits

        return unit

    # 优化器 AdamOptimizer
    def g_optimizer(self, *args, **kwargs):
        # 根据WGAN的结果进行模型改进去掉损失中的log@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        # return tf.train.AdamOptimizer(*args, **kwargs)
        return tf.train.RMSPropOptimizer(*args, **kwargs)

        # Compute the similarity between minibatch examples and all embeddings.
        # We use the cosine distance:

    # 设定相似度检验，貌似没有用到？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？
    def set_similarity(self, valid_examples=None, pca=True):
        if valid_examples == None:
            if pca:
                valid_examples = np.array(range(20))
            else:
                valid_examples = np.array(range(self.num_vocabulary))
        self.valid_dataset = tf.constant(valid_examples, dtype=tf.int32)
        self.norm = tf.sqrt(tf.reduce_sum(tf.square(self.g_embeddings), 1, keep_dims=True))
        self.normalized_embeddings = self.g_embeddings / self.norm
        # PCA
        if self.num_vocabulary >= 20 and pca == True:
            emb = tf.matmul(self.normalized_embeddings, tf.transpose(self.normalized_embeddings))
            s, u, v = tf.svd(emb)
            u_r = tf.strided_slice(u, begin=[0, 0], end=[20, self.num_vocabulary], strides=[1, 1])
            self.normalized_embeddings = tf.matmul(u_r, self.normalized_embeddings)
        self.valid_embeddings = tf.nn.embedding_lookup(self.normalized_embeddings, self.valid_dataset)
        self.similarity = tf.matmul(self.valid_embeddings, tf.transpose(self.normalized_embeddings))
